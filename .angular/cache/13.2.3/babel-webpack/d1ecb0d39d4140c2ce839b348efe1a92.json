{"ast":null,"code":"import { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  // Example of service-in-service\n  constructor(messageService) {\n    this.messageService = messageService;\n  } // Returns the mock heroes asynchronously with Observables\n\n\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add(\"HeroService: fetched heroes\");\n    return heroes;\n  }\n\n}\n\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n};\n\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/dchang/Documents/GitHub/tours-of-heroes/src/app/hero.service.ts"],"names":["HEROES","of","i0","i1","HeroService","constructor","messageService","getHeroes","heroes","add","ɵfac","HeroService_Factory","t","ɵɵinject","MessageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrB;AACAC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACH,GAJoB,CAKrB;;;AACAC,EAAAA,SAAS,GAAG;AACR,UAAMC,MAAM,GAAGP,EAAE,CAACD,MAAD,CAAjB;AACA,SAAKM,cAAL,CAAoBG,GAApB,CAAwB,6BAAxB;AACA,WAAOD,MAAP;AACH;;AAVoB;;AAYzBJ,WAAW,CAACM,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIR,WAAV,EAAuBF,EAAE,CAACW,QAAH,CAAYV,EAAE,CAACW,cAAf,CAAvB,CAAP;AAAgE,CAArH;;AACAV,WAAW,CAACW,KAAZ,GAAoB,aAAcb,EAAE,CAACc,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEb,WAAT;AAAsBc,EAAAA,OAAO,EAAEd,WAAW,CAACM,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n    // Example of service-in-service\n    constructor(messageService) {\n        this.messageService = messageService;\n    }\n    // Returns the mock heroes asynchronously with Observables\n    getHeroes() {\n        const heroes = of(HEROES);\n        this.messageService.add(\"HeroService: fetched heroes\");\n        return heroes;\n    }\n}\nHeroService.ɵfac = function HeroService_Factory(t) { return new (t || HeroService)(i0.ɵɵinject(i1.MessageService)); };\nHeroService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HeroService, factory: HeroService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}