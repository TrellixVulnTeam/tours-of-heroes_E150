{"ast":null,"code":"import { of } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  // Example of service-in-service\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = \"api/heroes\"; // URL to the web api\n  }\n  /* Log a HeroService message with the MessageService */\n\n\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  handleError(operation = \"operation\", result) {\n    return error => {\n      // TODO: send the error to remote loggin infrastructure\n      console.log(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  } // Returns the mock heroes asynchronously with Http.get\n\n  /* GET All heroes s*/\n\n\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log(\"featured heroes\")), catchError(this.handleError(\"getHeroes\", [])));\n  } // getHero() for hero details and its id\n\n  /** GET hero by id. Will 404 if id not found */\n\n\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /* PUT: update the hero on the server */\n\n\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError(\"updateHero\")));\n  }\n\n}\n\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\n\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/dchang/Documents/GitHub/tours-of-heroes/src/app/hero.service.ts"],"names":["of","catchError","tap","i0","i1","i2","HeroService","constructor","messageService","http","heroesUrl","log","message","add","handleError","operation","result","error","console","getHeroes","get","pipe","_","getHero","id","url","updateHero","hero","put","httpOptions","ɵfac","HeroService_Factory","t","ɵɵinject","MessageService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,SAASA,EAAT,QAAmB,MAAnB;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,gBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrB;AACAC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,IAAjB,EAAuB;AAC9B,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiB,YAAjB,CAH8B,CAGC;AAClC;AACD;;;AACAC,EAAAA,GAAG,CAACC,OAAD,EAAU;AACT,SAAKJ,cAAL,CAAoBK,GAApB,CAAyB,gBAAeD,OAAQ,EAAhD;AACH;;AACDE,EAAAA,WAAW,CAACC,SAAS,GAAG,WAAb,EAA0BC,MAA1B,EAAkC;AACzC,WAAQC,KAAD,IAAW;AACd;AACAC,MAAAA,OAAO,CAACP,GAAR,CAAYM,KAAZ,EAFc,CAEM;AACpB;;AACA,WAAKN,GAAL,CAAU,GAAEI,SAAU,YAAWE,KAAK,CAACL,OAAQ,EAA/C;AACA,aAAOZ,EAAE,CAACgB,MAAD,CAAT;AACH,KAND;AAOH,GAnBoB,CAoBrB;;AACA;;;AACAG,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKV,IAAL,CAAUW,GAAV,CAAc,KAAKV,SAAnB,EAA8BW,IAA9B,CAAmCnB,GAAG,CAAEoB,CAAD,IAAO,KAAKX,GAAL,CAAS,iBAAT,CAAR,CAAtC,EAA4EV,UAAU,CAAC,KAAKa,WAAL,CAAiB,WAAjB,EAA8B,EAA9B,CAAD,CAAtF,CAAP;AACH,GAxBoB,CAyBrB;;AACA;;;AACAS,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR,UAAMC,GAAG,GAAI,GAAE,KAAKf,SAAU,IAAGc,EAAG,EAApC;AACA,WAAO,KAAKf,IAAL,CAAUW,GAAV,CAAcK,GAAd,EAAmBJ,IAAnB,CAAwBnB,GAAG,CAAEoB,CAAD,IAAO,KAAKX,GAAL,CAAU,mBAAkBa,EAAG,EAA/B,CAAR,CAA3B,EAAuEvB,UAAU,CAAC,KAAKa,WAAL,CAAkB,cAAaU,EAAG,EAAlC,CAAD,CAAjF,CAAP;AACH;AACD;;;AACAE,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAO,KAAKlB,IAAL,CAAUmB,GAAV,CAAc,KAAKlB,SAAnB,EAA8BiB,IAA9B,EAAoC,KAAKE,WAAzC,EAAsDR,IAAtD,CAA2DnB,GAAG,CAAEoB,CAAD,IAAO,KAAKX,GAAL,CAAU,mBAAkBgB,IAAI,CAACH,EAAG,EAApC,CAAR,CAA9D,EAA+GvB,UAAU,CAAC,KAAKa,WAAL,CAAiB,YAAjB,CAAD,CAAzH,CAAP;AACH;;AAlCoB;;AAoCzBR,WAAW,CAACwB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI1B,WAAV,EAAuBH,EAAE,CAAC8B,QAAH,CAAY7B,EAAE,CAAC8B,cAAf,CAAvB,EAAuD/B,EAAE,CAAC8B,QAAH,CAAY5B,EAAE,CAAC8B,UAAf,CAAvD,CAAP;AAA4F,CAAjJ;;AACA7B,WAAW,CAAC8B,KAAZ,GAAoB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEhC,WAAT;AAAsBiC,EAAAA,OAAO,EAAEjC,WAAW,CAACwB,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { of } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n    // Example of service-in-service\n    constructor(messageService, http) {\n        this.messageService = messageService;\n        this.http = http;\n        this.heroesUrl = \"api/heroes\"; // URL to the web api\n    }\n    /* Log a HeroService message with the MessageService */\n    log(message) {\n        this.messageService.add(`HeroService: ${message}`);\n    }\n    handleError(operation = \"operation\", result) {\n        return (error) => {\n            // TODO: send the error to remote loggin infrastructure\n            console.log(error); // log to console instead\n            // TODO: better job of transforming error for user consumption\n            this.log(`${operation} failed: ${error.message}`);\n            return of(result);\n        };\n    }\n    // Returns the mock heroes asynchronously with Http.get\n    /* GET All heroes s*/\n    getHeroes() {\n        return this.http.get(this.heroesUrl).pipe(tap((_) => this.log(\"featured heroes\")), catchError(this.handleError(\"getHeroes\", [])));\n    }\n    // getHero() for hero details and its id\n    /** GET hero by id. Will 404 if id not found */\n    getHero(id) {\n        const url = `${this.heroesUrl}/${id}`;\n        return this.http.get(url).pipe(tap((_) => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n    }\n    /* PUT: update the hero on the server */\n    updateHero(hero) {\n        return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap((_) => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError(\"updateHero\")));\n    }\n}\nHeroService.ɵfac = function HeroService_Factory(t) { return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient)); };\nHeroService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HeroService, factory: HeroService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}