{"ast":null,"code":"import { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  // Example of service-in-service\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = \"api/heroes\"; // URL to the web api\n  }\n  /* Log a HeroService message with the MessageService */\n\n\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n\n  handleError(operation = \"operation\", result) {\n    return error => {\n      // TODO: send the error to remote loggin infrastructure\n      console.log(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n\n      this.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  } // Returns the mock heroes asynchronously with Http.get\n\n\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(catchError(this.handleError(\"getHeroes\", [])));\n  } // getHero() for hero details and its id\n\n\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n}\n\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\n\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/dchang/Documents/GitHub/tours-of-heroes/src/app/hero.service.ts"],"names":["HEROES","of","catchError","i0","i1","i2","HeroService","constructor","messageService","http","heroesUrl","log","message","add","handleError","operation","result","error","console","getHeroes","get","pipe","getHero","id","hero","find","h","ɵfac","HeroService_Factory","t","ɵɵinject","MessageService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrB;AACAC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,IAAjB,EAAuB;AAC9B,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiB,YAAjB,CAH8B,CAGC;AAClC;AACD;;;AACAC,EAAAA,GAAG,CAACC,OAAD,EAAU;AACT,SAAKJ,cAAL,CAAoBK,GAApB,CAAyB,gBAAeD,OAAQ,EAAhD;AACH;;AACDE,EAAAA,WAAW,CAACC,SAAS,GAAG,WAAb,EAA0BC,MAA1B,EAAkC;AACzC,WAAQC,KAAD,IAAW;AACd;AACAC,MAAAA,OAAO,CAACP,GAAR,CAAYM,KAAZ,EAFc,CAEM;AACpB;;AACA,WAAKN,GAAL,CAAU,GAAEI,SAAU,YAAWE,KAAK,CAACL,OAAQ,EAA/C;AACA,aAAOX,EAAE,CAACe,MAAD,CAAT;AACH,KAND;AAOH,GAnBoB,CAoBrB;;;AACAG,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKV,IAAL,CACFW,GADE,CACE,KAAKV,SADP,EAEFW,IAFE,CAEGnB,UAAU,CAAC,KAAKY,WAAL,CAAiB,WAAjB,EAA8B,EAA9B,CAAD,CAFb,CAAP;AAGH,GAzBoB,CA0BrB;;;AACAQ,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR;AACA;AACA,UAAMC,IAAI,GAAGxB,MAAM,CAACyB,IAAP,CAAaC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAASA,EAA5B,CAAb;AACA,SAAKf,cAAL,CAAoBK,GAApB,CAAyB,gCAA+BU,EAAG,EAA3D;AACA,WAAOtB,EAAE,CAACuB,IAAD,CAAT;AACH;;AAjCoB;;AAmCzBlB,WAAW,CAACqB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIvB,WAAV,EAAuBH,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,cAAf,CAAvB,EAAuD5B,EAAE,CAAC2B,QAAH,CAAYzB,EAAE,CAAC2B,UAAf,CAAvD,CAAP;AAA4F,CAAjJ;;AACA1B,WAAW,CAAC2B,KAAZ,GAAoB,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,WAAT;AAAsB8B,EAAAA,OAAO,EAAE9B,WAAW,CAACqB,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n    // Example of service-in-service\n    constructor(messageService, http) {\n        this.messageService = messageService;\n        this.http = http;\n        this.heroesUrl = \"api/heroes\"; // URL to the web api\n    }\n    /* Log a HeroService message with the MessageService */\n    log(message) {\n        this.messageService.add(`HeroService: ${message}`);\n    }\n    handleError(operation = \"operation\", result) {\n        return (error) => {\n            // TODO: send the error to remote loggin infrastructure\n            console.log(error); // log to console instead\n            // TODO: better job of transforming error for user consumption\n            this.log(`${operation} failed: ${error.message}`);\n            return of(result);\n        };\n    }\n    // Returns the mock heroes asynchronously with Http.get\n    getHeroes() {\n        return this.http\n            .get(this.heroesUrl)\n            .pipe(catchError(this.handleError(\"getHeroes\", [])));\n    }\n    // getHero() for hero details and its id\n    getHero(id) {\n        // For now, assume that a hero with the specified `id` always exists.\n        // Error handling will be added in the next step of the tutorial.\n        const hero = HEROES.find((h) => h.id === id);\n        this.messageService.add(`HeroService: fetched hero id=${id}`);\n        return of(hero);\n    }\n}\nHeroService.ɵfac = function HeroService_Factory(t) { return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient)); };\nHeroService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HeroService, factory: HeroService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}