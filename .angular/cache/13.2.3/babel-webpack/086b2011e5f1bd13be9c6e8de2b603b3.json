{"ast":null,"code":"import { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n  // Example of service-in-service\n  constructor(messageService, http) {\n    this.messageService = messageService;\n    this.http = http;\n    this.heroesUrl = \"api/heroes\"; // URL to the web api\n  }\n  /* Log a HeroService message with the MessageService */\n\n\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  } // Returns the mock heroes asynchronously with Observables\n\n\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add(\"HeroService: fetched heroes\");\n    return heroes;\n  } // getHero() for hero details and its id\n\n\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n\n}\n\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient));\n};\n\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/Users/dchang/Documents/GitHub/tours-of-heroes/src/app/hero.service.ts"],"names":["HEROES","of","i0","i1","i2","HeroService","constructor","messageService","http","heroesUrl","log","message","add","getHeroes","heroes","getHero","id","hero","find","h","ɵfac","HeroService_Factory","t","ɵɵinject","MessageService","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrB;AACAC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,IAAjB,EAAuB;AAC9B,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiB,YAAjB,CAH8B,CAGC;AAClC;AACD;;;AACAC,EAAAA,GAAG,CAACC,OAAD,EAAU;AACT,SAAKJ,cAAL,CAAoBK,GAApB,CAAyB,gBAAeD,OAAQ,EAAhD;AACH,GAVoB,CAWrB;;;AACAE,EAAAA,SAAS,GAAG;AACR,UAAMC,MAAM,GAAGb,EAAE,CAACD,MAAD,CAAjB;AACA,SAAKO,cAAL,CAAoBK,GAApB,CAAwB,6BAAxB;AACA,WAAOE,MAAP;AACH,GAhBoB,CAiBrB;;;AACAC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR;AACA;AACA,UAAMC,IAAI,GAAGjB,MAAM,CAACkB,IAAP,CAAaC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAASA,EAA5B,CAAb;AACA,SAAKT,cAAL,CAAoBK,GAApB,CAAyB,gCAA+BI,EAAG,EAA3D;AACA,WAAOf,EAAE,CAACgB,IAAD,CAAT;AACH;;AAxBoB;;AA0BzBZ,WAAW,CAACe,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIjB,WAAV,EAAuBH,EAAE,CAACqB,QAAH,CAAYpB,EAAE,CAACqB,cAAf,CAAvB,EAAuDtB,EAAE,CAACqB,QAAH,CAAYnB,EAAE,CAACqB,UAAf,CAAvD,CAAP;AAA4F,CAAjJ;;AACApB,WAAW,CAACqB,KAAZ,GAAoB,aAAcxB,EAAE,CAACyB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvB,WAAT;AAAsBwB,EAAAA,OAAO,EAAExB,WAAW,CAACe,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HEROES } from \"./mock-heroes\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class HeroService {\n    // Example of service-in-service\n    constructor(messageService, http) {\n        this.messageService = messageService;\n        this.http = http;\n        this.heroesUrl = \"api/heroes\"; // URL to the web api\n    }\n    /* Log a HeroService message with the MessageService */\n    log(message) {\n        this.messageService.add(`HeroService: ${message}`);\n    }\n    // Returns the mock heroes asynchronously with Observables\n    getHeroes() {\n        const heroes = of(HEROES);\n        this.messageService.add(\"HeroService: fetched heroes\");\n        return heroes;\n    }\n    // getHero() for hero details and its id\n    getHero(id) {\n        // For now, assume that a hero with the specified `id` always exists.\n        // Error handling will be added in the next step of the tutorial.\n        const hero = HEROES.find((h) => h.id === id);\n        this.messageService.add(`HeroService: fetched hero id=${id}`);\n        return of(hero);\n    }\n}\nHeroService.ɵfac = function HeroService_Factory(t) { return new (t || HeroService)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.HttpClient)); };\nHeroService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: HeroService, factory: HeroService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}